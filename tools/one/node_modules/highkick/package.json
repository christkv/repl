{
  "name": "highkick",
  "version": "1.6.2",
  "description": "Asynchronous, no-style, super simple testing tool.",
  "author": {
    "name": "Azer Koculu",
    "email": "azer@kodfabrik.com"
  },
  "keywords": [
    "testing",
    "test"
  ],
  "directories": {
    "lib": "./lib"
  },
  "main": "./lib/highkick.js",
  "bin": {
    "highkick": "./bin/highkick"
  },
  "dependencies": {
    "style": "0.1.x",
    "optimist": "0.x"
  },
  "repository": {
    "type": "git",
    "url": "http://github.com/azer/highkick.git"
  },
  "scripts": {
    "test": "./bin/highkick test/main.js"
  },
  "readme": "HighKick is a no-style, light-weight and powerful testing tool for NodeJS.\n\n**Screenshots:**\n\n![Screenshot 1](https://dl.dropbox.com/s/xzuwm660jqzd1vw/highkick_1.png)\n![Screenshot 2](https://dl.dropbox.com/s/wjsxpt57gcwlbqb/highkick_2.png)\n\n# Installation\n\n```bash\n$ npm install highkick\n```\n\n# Overview\n\nCoffeeScript:\n```coffeescript\ninit = (options, callback) ->\n    startWebServer callback\n  \ntestFoo = (callback) ->\n    get \"http://localhost/api/foo\", (error, response) ->\n        if error\n            callback error\n            return\n        \n        assert.equal response.foo 'foo'\n        callback()\n        \nend = (callback) ->\n    stopWebServer callback\n\nmodule.exports = \n    init: init\n    testFoo: testFoo\n    end: end\n```\n\nJavaScript:\n\n```javascript\n\nfunction init(options, callback){\n    startWebServer(callback);\n}\n\nfunction testFoo(callback){\n    get('http://localhost/api/foo', function(error, response){\n        if(error){\n            callback(error);\n            return;\n        }\n        \n        assert.equal(response.foo, 'foo')\n        \n        callback();\n    });\n}\n\nfunction end(callback){\n    stopWebServer(callback);\n}\n\nmodule.exports = {\n    'init': init,\n    'testFoo': testFoo,\n    'end': end\n};\n\n```\n\n# First Steps\n\nHighKick takes a module and executes the functions that have a name starting with \"test\". A simple test module would look like this;\n\n```javascript\n\nvar assert = require('assert');\n\nexports.testFoo = function(callback){\n    try {\n        assert.something();\n        callback();\n    } catch (error) {\n        callback(error);\n    }\n}\n\nexports.testBar = function(callback){\n    setTimeout(callback, 100);\n}\n\n```\n\nBelow command will run the all tests defined in tests.js;\n\n```bash\n$ highkick tests.js\n```\n\nTo specify the tests that needs to run;\n\n```bash\n$ KICK=foo highkick tests.js\n```\n\nse comma for separating multiple test names, and '*' for running all tests.\n\n## Init\n\nAn init function is called before the execution of the tests in a module for once. Init functions take an `options` object from HighKick and are able to\nproduce the first parameters of test functions as shown in the example below;\n\n```javascript\nfunction init(options, callback){\n    callback( undefined, +(new Date), Math.PI );\n}\n\nexports.testFoo = function(timestamp, pi, callback){\n    ...\n}\n```\n\n## beforeEach\n\nUse `beforeEach` to define a function to be called before each test.\n\n```javascript\n\nfunction beforeEach(callback){\n    callback( undefined, +(new Date));\n}\n\nexports.testFoo = function(now, callback){\n    ...\n}\n\n```\n\nSimilar to the `init` functions, what a `beforeEach` function produces is passed to test functions. The key difference is, `beforeEach` functions take parameters from `init` functions, too.\n\n```javascript\nexports.init = function(options, callback){\n    callback(undefined, 'hello');\n}\n\nexports.beforeEach = function(hello, callback){\n    callback(undefined, 'world';\n}\n\nexports.testFoo = function(hello, world, callback){\n    ...\n}\n```\n\n## afterEach\n\nAn `afterEach` function is called after each test, regardless of results.\n\n```javascript\nexports.beforeEach = function(callback){\n    callback(undefined, new ChildProcess);\n}\n\nexports.testFoo = function(process, callback){\n    ...\n}\n\nexports.afterEach = function(process, callback){\n    process.terminate();\n    callback();\n}\n```\n\n## end\n\nUnlikely to `afterEach`, an `end` function is called after all tests are done.\n\n```javascript\nexports.init = function(callback){\n    callback(undefined, new ChildProcess);\n}\n\nexports.testFoo = function(process, callback){\n    ...\n}\n\nexports.end = function(process, callback){\n    process.terminate();\n    callback();\n}\n```\n\n## Nested Tests a.k.a Programmatic Way of Running Tests\n\nHighKick provides a very minimalistic concept of nested tests;\n\n```javascript\nvar highkick = require('highkick');\n\nexports.testFoobar = highkick('./foobar');\n```\n\nTo see the output of child tests;\n\n```bash\n$ VERBOSE=foobar highkick tests.js\n```\n\nYou can use comma for separating multiple test names and pass '*' for enabling output for child tests.\n\nIn the case a custom callback is needed for getting a summary of testsuite:\n\n```\nhighkick('./tests', function(error, result){\n    if(error){\n        logging.error('Ran %d tests, %d failed', result.len, result.fail);\n        logging.error(error);\n    }\n\n    logging.info('Ran %d tests successfully, without any error.', result.len);\n});\n```\n\n## Async Running\n\nPass `--async` option to run the tests asynchronously;\n\n```bash\n$ highkick tests.js --async\n```\n\nIn the case you need the programmatic way;\n\n```\nvar highkick = require('highkick');\n\nhighkick({ 'path': './tests', 'async': true }, function(error, result){\n    ...\n});\n```\n\n# Projects Using HighKick\n\n  * [OneJS](http://github.com/azer/onejs)\n  * [LowKick](http://github.com/azer/lowkick)\n  * [boxcars](http://github.com/azer/boxcars)\n  * [stonetunnel](http://github.com/azer/stonetunnel)\n",
  "readmeFilename": "README.md",
  "_id": "highkick@1.6.2",
  "dist": {
    "shasum": "fe540af0012ccde287eb007c6af81559d4ebc9d4"
  },
  "_from": "highkick@1.x"
}
