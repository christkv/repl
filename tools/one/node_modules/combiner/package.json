{
  "name": "combiner",
  "version": "1.2.0",
  "description": "Flexible file-joining library with functional middleware support.",
  "author": {
    "name": "Azer Koculu",
    "email": "azer@kodfabrik.com"
  },
  "keywords": [
    "combine",
    "combiner",
    "fs",
    "join",
    "merge",
    "files"
  ],
  "directories": {
    "lib": "./lib"
  },
  "main": "./lib/combiner.js",
  "bin": {
    "combiner": "./bin/combiner.js"
  },
  "dependencies": {
    "functools": "1.1.0",
    "opts": "1.2.1"
  },
  "readme": "combiner is both a command-line utility and a library for merging and processing\nfiles.  The basic idea behind its is to take advantage of a functional,\nflexible middleware that composes map/reduce/filter callbacks.\n\nInstall\n=======\nFrom NPM:\n    $ npm install combiner\n\nFrom Source Code:\n    $ git clone https://github.com/azer/combiner.git\n    $ cd combiner;\n    $ make deps\n    $ make install\n\nQuick Start\n===========\nBesides of the API provided by the library, combiner includes a command line\nscript to accomplish composite file merging aims. \n\nMost basic usage example is running it without any parameters. Which produces a\nmerge of all files on the executed directory.\n\n    $ echo \"foo\">a;\n    $ echo \"bar\">b;\n    $ echo \"qux\">c;\n    $ combiner\n    foo\n    bar\n    qux\n\nSpecific filenames and directories can be picked as well.\n  \n    $ combiner a c\n    foo\n    qux\n\nThe goal of combiner is to provide a middleware that lets us to process these\nfiles easily;\n\n    $ combiner -map \"function(el,callback){ callback(null, el.toUpperCase()) }\"\n    FOO\n    BAR\n    QUX\n\nThe simple command above uppercases all combinerd contents, as you've supposed.\nThe other options available are reduce and filter. Reduce option basicly\nreplaces the default function joining the contens of the files; \n\n    $ combiner -reduce \"function(a,b,callback){ callback(null,a+\",\"+b) }\"\n    FOO,BAR,QUX\n\nIt's quite similar with the map function as you've seen above. Unlike the map\nand reduce options, filter callbacks take filenames instead of the contents of\nthe files.\n\n    $ combiner -filter \"function(filename, cb){ cb(null,/^f|q/); }\"\n    FOO\n    QUX\n\nThe reasion behind this approach lies on the basic design idea of the combiner\nlibrary. Its body is made up of a chain of functions, applying listed\noperations below;\n\n  - find all files in the working directory\n  - include and flatten nested directories if any exists\n  - apply filter callbacks to gathered filenames\n  - apply map callbacks to the gathered filenames*\n  - apply specified reduce function or the default one joining passed contents\n    with new lines.\n\nDependencies\n============\n* nodejs\n* functools\n\nDevelopment\n===========\nstatus: under development\ntodo:\n  - usage example\n  - extend documentation (using ronn)\n  - build a website (combiner.kodfabrik.com)\n",
  "readmeFilename": "README",
  "_id": "combiner@1.2.0",
  "_from": "combiner@1.2.x"
}
